services:
  app:
    build: ./app
    container_name: typing_app
    ports:
      - "3000:3000"
    volumes:
      - ./app:/app
      - ./app/node_modules:/app/node_modules

  # New service for the Django API
  api:
    build: ./api
    container_name: typing_api
    ports:
      - "8000:8000"
    volumes:
      - ./api:/api
    environment:
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    command: gunicorn api.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy

  # Database service for the Django API
  db:
    image: postgres:15
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert.pem:/etc/ssl/certs/cert.pem:ro
      - ./key.pem:/etc/ssl/private/key.pem:ro
    depends_on:
      - api

volumes:
  postgres_data: